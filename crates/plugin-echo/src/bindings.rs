// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod repl {
    pub mod api {
        /// Provided by the host, accessible by plugins
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod http_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct HttpHeader {
                pub name: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for HttpHeader {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpHeader")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct HttpResponse {
                pub status: u16,
                pub headers: _rt::Vec<HttpHeader>,
                pub body: _rt::String,
            }
            impl ::core::fmt::Debug for HttpResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HttpResponse")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get(
                url: &str,
                headers: &[HttpHeader],
            ) -> Result<HttpResponse, _rt::String> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 6
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = url;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec4 = headers;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let HttpHeader { name: name1, value: value1 } = e;
                            let vec2 = name1;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            let vec3 = value1;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/http-client")]
                    unsafe extern "C" {
                        #[link_name = "get"]
                        fn wit_import6(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import6(ptr0.cast_mut(), len0, result4, len4, ptr5) };
                    let l7 = i32::from(*ptr5.add(0).cast::<u8>());
                    let result24 = match l7 {
                        0 => {
                            let e = {
                                let l8 = i32::from(
                                    *ptr5.add(::core::mem::size_of::<*const u8>()).cast::<u16>(),
                                );
                                let l9 = *ptr5
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l10 = *ptr5
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l9;
                                let len17 = l10;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l11 = *base.add(0).cast::<*mut u8>();
                                        let l12 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 = _rt::Vec::from_raw_parts(
                                            l11.cast(),
                                            len13,
                                            len13,
                                        );
                                        let l14 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l15 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        HttpHeader {
                                            name: _rt::string_lift(bytes13),
                                            value: _rt::string_lift(bytes16),
                                        }
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr5
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr5
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len20 = l19;
                                let bytes20 = _rt::Vec::from_raw_parts(
                                    l18.cast(),
                                    len20,
                                    len20,
                                );
                                HttpResponse {
                                    status: l8 as u16,
                                    headers: result17,
                                    body: _rt::string_lift(bytes20),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l21 = *ptr5
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *ptr5
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let bytes23 = _rt::Vec::from_raw_parts(
                                    l21.cast(),
                                    len23,
                                    len23,
                                );
                                _rt::string_lift(bytes23)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    result24
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod transport {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ReplStatus {
                Success,
                Error,
            }
            impl ::core::fmt::Debug for ReplStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ReplStatus::Success => {
                            f.debug_tuple("ReplStatus::Success").finish()
                        }
                        ReplStatus::Error => f.debug_tuple("ReplStatus::Error").finish(),
                    }
                }
            }
            impl ReplStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ReplStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ReplStatus::Success,
                        1 => ReplStatus::Error,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct PluginResponse {
                pub status: ReplStatus,
                pub stdout: Option<_rt::String>,
                pub stderr: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for PluginResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginResponse")
                        .field("status", &self.status)
                        .field("stdout", &self.stdout)
                        .field("stderr", &self.stderr)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ParsedLine {
                pub command: _rt::String,
                pub payload: _rt::String,
            }
            impl ::core::fmt::Debug for ParsedLine {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ParsedLine")
                        .field("command", &self.command)
                        .field("payload", &self.payload)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum ReadlineResponse {
                ToRun(ParsedLine),
                Ready(PluginResponse),
            }
            impl ::core::fmt::Debug for ReadlineResponse {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ReadlineResponse::ToRun(e) => {
                            f.debug_tuple("ReadlineResponse::ToRun").field(e).finish()
                        }
                        ReadlineResponse::Ready(e) => {
                            f.debug_tuple("ReadlineResponse::Ready").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct ReplVar {
                pub key: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for ReplVar {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReplVar")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod repl {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod plugin {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PluginResponse = super::super::super::super::repl::api::transport::PluginResponse;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_name_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::name();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_name<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_man_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::man();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_man<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::run(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::repl::api::transport::PluginResponse {
                                status: status3,
                                stdout: stdout3,
                                stderr: stderr3,
                            } = e;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (status3.clone() as i32) as u8;
                            match stdout3 {
                                Some(e) => {
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match stderr3 {
                                Some(e) => {
                                    *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(_) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                            let l4 = i32::from(
                                *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                _ => {
                                    let l5 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                        }
                        _ => {}
                    }
                }
                pub trait Guest {
                    fn name() -> _rt::String;
                    fn man() -> _rt::String;
                    fn run(payload: _rt::String) -> Result<PluginResponse, ()>;
                }
                #[doc(hidden)]
                macro_rules! __export_repl_api_plugin_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name = "repl:api/plugin#name")]
                        unsafe extern "C" fn export_name() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_name_cabi::<$ty > () } } #[unsafe
                        (export_name = "cabi_post_repl:api/plugin#name")] unsafe extern
                        "C" fn _post_return_name(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_name::<$ty > (arg0) } }
                        #[unsafe (export_name = "repl:api/plugin#man")] unsafe extern "C"
                        fn export_man() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_man_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_repl:api/plugin#man")] unsafe extern "C" fn
                        _post_return_man(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_man::<$ty > (arg0) } }
                        #[unsafe (export_name = "repl:api/plugin#run")] unsafe extern "C"
                        fn export_run(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_run_cabi::<$ty > (arg0,
                        arg1) } } #[unsafe (export_name =
                        "cabi_post_repl:api/plugin#run")] unsafe extern "C" fn
                        _post_return_run(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_run::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_repl_api_plugin_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_plugin_api_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::repl::api::plugin::__export_repl_api_plugin_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::repl::api::plugin);
    };
}
#[doc(inline)]
pub(crate) use __export_plugin_api_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:repl:api:plugin-api:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 642] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x81\x04\x01A\x02\x01\
A\x07\x01B\x08\x01r\x02\x04names\x05values\x04\0\x0bhttp-header\x03\0\0\x01p\x01\
\x01r\x03\x06status{\x07headers\x02\x04bodys\x04\0\x0dhttp-response\x03\0\x03\x01\
j\x01\x04\x01s\x01@\x02\x03urls\x07headers\x02\0\x05\x04\0\x03get\x01\x06\x03\0\x14\
repl:api/http-client\x05\0\x01B\x0b\x01m\x02\x07success\x05error\x04\0\x0brepl-s\
tatus\x03\0\0\x01ks\x01r\x03\x06status\x01\x06stdout\x02\x06stderr\x02\x04\0\x0f\
plugin-response\x03\0\x03\x01r\x02\x07commands\x07payloads\x04\0\x0bparsed-line\x03\
\0\x05\x01q\x02\x06to-run\x01\x06\0\x05ready\x01\x04\0\x04\0\x11readline-respons\
e\x03\0\x07\x01r\x02\x03keys\x05values\x04\0\x08repl-var\x03\0\x09\x03\0\x12repl\
:api/transport\x05\x01\x02\x03\0\x01\x0fplugin-response\x01B\x08\x02\x03\x02\x01\
\x02\x04\0\x0fplugin-response\x03\0\0\x01@\0\0s\x04\0\x04name\x01\x02\x04\0\x03m\
an\x01\x02\x01j\x01\x01\0\x01@\x01\x07payloads\0\x03\x04\0\x03run\x01\x04\x04\0\x0f\
repl:api/plugin\x05\x03\x04\0\x13repl:api/plugin-api\x04\0\x0b\x10\x01\0\x0aplug\
in-api\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227\
.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
