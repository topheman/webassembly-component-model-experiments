// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod repl {
    pub mod api {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod transport {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ReplStatus {
                Success,
                Error,
                Warning,
            }
            impl ::core::fmt::Debug for ReplStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ReplStatus::Success => {
                            f.debug_tuple("ReplStatus::Success").finish()
                        }
                        ReplStatus::Error => f.debug_tuple("ReplStatus::Error").finish(),
                        ReplStatus::Warning => {
                            f.debug_tuple("ReplStatus::Warning").finish()
                        }
                    }
                }
            }
            impl ReplStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ReplStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ReplStatus::Success,
                        1 => ReplStatus::Error,
                        2 => ReplStatus::Warning,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct ReplResult {
                pub color: Option<_rt::String>,
                pub status: ReplStatus,
                pub output: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ReplResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReplResult")
                        .field("color", &self.color)
                        .field("status", &self.status)
                        .field("output", &self.output)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod repl {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod repl_logic {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type ReplResult = super::super::super::super::repl::api::transport::ReplResult;
                #[derive(Clone)]
                pub struct PluginConfig {
                    pub command: _rt::String,
                    pub arg_count: Option<i8>,
                    pub man: _rt::String,
                }
                impl ::core::fmt::Debug for PluginConfig {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("PluginConfig")
                            .field("command", &self.command)
                            .field("arg-count", &self.arg_count)
                            .field("man", &self.man)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ReplEnvVar {
                    pub key: _rt::String,
                    pub value: _rt::String,
                }
                impl ::core::fmt::Debug for ReplEnvVar {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ReplEnvVar")
                            .field("key", &self.key)
                            .field("value", &self.value)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_set_plugins_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base8 = arg0;
                    let len8 = arg1;
                    let mut result8 = _rt::Vec::with_capacity(len8);
                    for i in 0..len8 {
                        let base = base8
                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                        let e8 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            PluginConfig {
                                command: _rt::string_lift(bytes2),
                                arg_count: match l3 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l4 = i32::from(
                                                *base
                                                    .add(1 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i8>(),
                                            );
                                            l4 as i8
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                man: _rt::string_lift(bytes7),
                            }
                        };
                        result8.push(e8);
                    }
                    _rt::cabi_dealloc(
                        base8,
                        len8 * (5 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    T::set_plugins(result8);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_set_env_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    T::set_env(ReplEnvVar {
                        key: _rt::string_lift(bytes0),
                        value: _rt::string_lift(bytes1),
                    });
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_env_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_env();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let ReplEnvVar { key: key2, value: value2 } = e;
                            let vec3 = (key2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (value2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_env<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base6 = l0;
                    let len6 = l1;
                    for i in 0..len6 {
                        let base = base6
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base6,
                        len6 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_readline_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::readline(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::repl::api::transport::ReplResult {
                        color: color3,
                        status: status3,
                        output: output3,
                    } = result1;
                    match color3 {
                        Some(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr2.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = (status3
                        .clone() as i32) as u8;
                    match output3 {
                        Some(e) => {
                            *ptr2
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr2
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        None => {
                            *ptr2
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_readline<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                    let l3 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l3 {
                        0 => {}
                        _ => {
                            let l4 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn set_plugins(plugins: _rt::Vec<PluginConfig>) -> ();
                    fn set_env(env_var: ReplEnvVar) -> ();
                    fn list_env() -> _rt::Vec<ReplEnvVar>;
                    fn readline(line: _rt::String) -> ReplResult;
                }
                #[doc(hidden)]
                macro_rules! __export_repl_api_repl_logic_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "repl:api/repl-logic#set-plugins")] unsafe extern "C" fn
                        export_set_plugins(arg0 : * mut u8, arg1 : usize,) { unsafe {
                        $($path_to_types)*:: _export_set_plugins_cabi::<$ty > (arg0,
                        arg1) } } #[unsafe (export_name = "repl:api/repl-logic#set-env")]
                        unsafe extern "C" fn export_set_env(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) { unsafe {
                        $($path_to_types)*:: _export_set_env_cabi::<$ty > (arg0, arg1,
                        arg2, arg3) } } #[unsafe (export_name =
                        "repl:api/repl-logic#list-env")] unsafe extern "C" fn
                        export_list_env() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_list_env_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_repl:api/repl-logic#list-env")] unsafe extern "C" fn
                        _post_return_list_env(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_list_env::<$ty > (arg0) } }
                        #[unsafe (export_name = "repl:api/repl-logic#readline")] unsafe
                        extern "C" fn export_readline(arg0 : * mut u8, arg1 : usize,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_readline_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name = "cabi_post_repl:api/repl-logic#readline")] unsafe
                        extern "C" fn _post_return_readline(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_readline::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_repl_api_repl_logic_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 7 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 7
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod plugin_runner {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type ReplResult = super::super::super::super::repl::api::transport::ReplResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_exec_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::exec(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::repl::api::transport::ReplResult {
                        color: color4,
                        status: status4,
                        output: output4,
                    } = result2;
                    match color4 {
                        Some(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr3
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        None => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    *ptr3.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>() = (status4
                        .clone() as i32) as u8;
                    match output4 {
                        Some(e) => {
                            *ptr3
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr3
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_exec<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                    let l3 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l3 {
                        0 => {}
                        _ => {
                            let l4 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn exec(command: _rt::String, payload: _rt::String) -> ReplResult;
                }
                #[doc(hidden)]
                macro_rules! __export_repl_api_plugin_runner_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "repl:api/plugin-runner#exec")] unsafe extern "C" fn
                        export_exec(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8, arg3
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_exec_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe
                        (export_name = "cabi_post_repl:api/plugin-runner#exec")] unsafe
                        extern "C" fn _post_return_exec(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_exec::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_repl_api_plugin_runner_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 7 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 7
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_host_api_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::repl::api::repl_logic::__export_repl_api_repl_logic_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::repl::api::repl_logic);
        $($path_to_types_root)*::
        exports::repl::api::plugin_runner::__export_repl_api_plugin_runner_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::repl::api::plugin_runner);
    };
}
#[doc(inline)]
pub(crate) use __export_host_api_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:repl:api:host-api:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 605] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xde\x03\x01A\x02\x01\
A\x07\x01B\x05\x01m\x03\x07success\x05error\x07warning\x04\0\x0brepl-status\x03\0\
\0\x01ks\x01r\x03\x05color\x02\x06status\x01\x06output\x02\x04\0\x0brepl-result\x03\
\0\x03\x03\0\x12repl:api/transport\x05\0\x02\x03\0\0\x0brepl-result\x01B\x11\x02\
\x03\x02\x01\x01\x04\0\x0brepl-result\x03\0\0\x01k~\x01r\x03\x07commands\x09arg-\
count\x02\x03mans\x04\0\x0dplugin-config\x03\0\x03\x01r\x02\x03keys\x05values\x04\
\0\x0crepl-env-var\x03\0\x05\x01p\x04\x01@\x01\x07plugins\x07\x01\0\x04\0\x0bset\
-plugins\x01\x08\x01@\x01\x07env-var\x06\x01\0\x04\0\x07set-env\x01\x09\x01p\x06\
\x01@\0\0\x0a\x04\0\x08list-env\x01\x0b\x01@\x01\x04lines\0\x01\x04\0\x08readlin\
e\x01\x0c\x04\0\x13repl:api/repl-logic\x05\x02\x01B\x04\x02\x03\x02\x01\x01\x04\0\
\x0brepl-result\x03\0\0\x01@\x02\x07commands\x07payloads\0\x01\x04\0\x04exec\x01\
\x02\x04\0\x16repl:api/plugin-runner\x05\x03\x04\0\x11repl:api/host-api\x04\0\x0b\
\x0e\x01\0\x08host-api\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-co\
mponent\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
