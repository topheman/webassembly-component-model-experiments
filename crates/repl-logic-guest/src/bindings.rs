// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod repl {
    pub mod api {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod transport {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ReplStatus {
                Success,
                Error,
                Warning,
            }
            impl ::core::fmt::Debug for ReplStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ReplStatus::Success => {
                            f.debug_tuple("ReplStatus::Success").finish()
                        }
                        ReplStatus::Error => f.debug_tuple("ReplStatus::Error").finish(),
                        ReplStatus::Warning => {
                            f.debug_tuple("ReplStatus::Warning").finish()
                        }
                    }
                }
            }
            impl ReplStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ReplStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ReplStatus::Success,
                        1 => ReplStatus::Error,
                        2 => ReplStatus::Warning,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct ReplResult {
                pub color: Option<_rt::String>,
                pub status: ReplStatus,
                pub output: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for ReplResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReplResult")
                        .field("color", &self.color)
                        .field("status", &self.status)
                        .field("output", &self.output)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ReadlineResult {
                pub command: _rt::String,
                pub payload: _rt::String,
            }
            impl ::core::fmt::Debug for ReadlineResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReadlineResult")
                        .field("command", &self.command)
                        .field("payload", &self.payload)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct PluginConfig {
                pub command: _rt::String,
                pub arg_count: Option<i8>,
                pub man: _rt::String,
            }
            impl ::core::fmt::Debug for PluginConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PluginConfig")
                        .field("command", &self.command)
                        .field("arg-count", &self.arg_count)
                        .field("man", &self.man)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ReplVar {
                pub key: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for ReplVar {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ReplVar")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host_state {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type PluginConfig = super::super::super::repl::api::transport::PluginConfig;
            pub type ReplVar = super::super::super::repl::api::transport::ReplVar;
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_plugins() -> _rt::Vec<PluginConfig> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/host-state")]
                    unsafe extern "C" {
                        #[link_name = "get-plugins"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l2;
                    let len12 = l3;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l9 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            super::super::super::repl::api::transport::PluginConfig {
                                command: _rt::string_lift(bytes6),
                                arg_count: match l7 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l8 = i32::from(
                                                *base
                                                    .add(1 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i8>(),
                                            );
                                            l8 as i8
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                man: _rt::string_lift(bytes11),
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (5 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result13 = result12;
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_repl_vars(vars: &[ReplVar]) -> () {
                unsafe {
                    let vec3 = vars;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::repl::api::transport::ReplVar {
                                key: key0,
                                value: value0,
                            } = e;
                            let vec1 = key0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = value0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/host-state")]
                    unsafe extern "C" {
                        #[link_name = "set-repl-vars"]
                        fn wit_import4(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import4(result3, len3) };
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_repl_vars() -> _rt::Vec<ReplVar> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/host-state")]
                    unsafe extern "C" {
                        #[link_name = "get-repl-vars"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<*mut u8>();
                    let l3 = *ptr0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            super::super::super::repl::api::transport::ReplVar {
                                key: _rt::string_lift(bytes6),
                                value: _rt::string_lift(bytes9),
                            }
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result11 = result10;
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_repl_var(var: &ReplVar) -> () {
                unsafe {
                    let super::super::super::repl::api::transport::ReplVar {
                        key: key0,
                        value: value0,
                    } = var;
                    let vec1 = key0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec2 = value0;
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/host-state")]
                    unsafe extern "C" {
                        #[link_name = "set-repl-var"]
                        fn wit_import3(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import3(ptr1.cast_mut(), len1, ptr2.cast_mut(), len2) };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod plugin_runner {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ReplResult = super::super::super::repl::api::transport::ReplResult;
            #[allow(unused_unsafe, clippy::all)]
            pub fn run(plugin_name: &str, payload: &str) -> ReplResult {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 7 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 7
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = plugin_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = payload;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/plugin-runner")]
                    unsafe extern "C" {
                        #[link_name = "run"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let l8 = i32::from(
                        *ptr2.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l9 = i32::from(
                        *ptr2.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result13 = super::super::super::repl::api::transport::ReplResult {
                        color: match l4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l5 = *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(
                                        l5.cast(),
                                        len7,
                                        len7,
                                    );
                                    _rt::string_lift(bytes7)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        status: super::super::super::repl::api::transport::ReplStatus::_lift(
                            l8 as u8,
                        ),
                        output: match l9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l10 = *ptr2
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *ptr2
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 = _rt::Vec::from_raw_parts(
                                        l10.cast(),
                                        len12,
                                        len12,
                                    );
                                    _rt::string_lift(bytes12)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result13
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn man(plugin_name: &str) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = plugin_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/plugin-runner")]
                    unsafe extern "C" {
                        #[link_name = "man"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn arg_count(plugin_name: &str) -> Option<i8> {
                unsafe {
                    #[repr(align(1))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                    let vec0 = plugin_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "repl:api/plugin-runner")]
                    unsafe extern "C" {
                        #[link_name = "arg-count"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = i32::from(*ptr1.add(1).cast::<i8>());
                                l4 as i8
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result5
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod repl {
        pub mod api {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod repl_logic {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type ReadlineResult = super::super::super::super::repl::api::transport::ReadlineResult;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_readline_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::readline(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::repl::api::transport::ReadlineResult {
                        command: command3,
                        payload: payload3,
                    } = result1;
                    let vec4 = (command3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr2.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec5 = (payload3.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    ::core::mem::forget(vec5);
                    *ptr2.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
                    *ptr2
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr5.cast_mut();
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_readline<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                }
                pub trait Guest {
                    fn readline(line: _rt::String) -> ReadlineResult;
                }
                #[doc(hidden)]
                macro_rules! __export_repl_api_repl_logic_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "repl:api/repl-logic#readline")] unsafe extern "C" fn
                        export_readline(arg0 : * mut u8, arg1 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_readline_cabi::<$ty >
                        (arg0, arg1) } } #[unsafe (export_name =
                        "cabi_post_repl:api/repl-logic#readline")] unsafe extern "C" fn
                        _post_return_readline(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_readline::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_repl_api_repl_logic_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_host_api_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::repl::api::repl_logic::__export_repl_api_repl_logic_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::repl::api::repl_logic);
    };
}
#[doc(inline)]
pub(crate) use __export_host_api_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:repl:api:host-api:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 884] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf5\x05\x01A\x02\x01\
A\x0c\x01B\x0c\x01m\x03\x07success\x05error\x07warning\x04\0\x0brepl-status\x03\0\
\0\x01ks\x01r\x03\x05color\x02\x06status\x01\x06output\x02\x04\0\x0brepl-result\x03\
\0\x03\x01r\x02\x07commands\x07payloads\x04\0\x0freadline-result\x03\0\x05\x01k~\
\x01r\x03\x07commands\x09arg-count\x07\x03mans\x04\0\x0dplugin-config\x03\0\x08\x01\
r\x02\x03keys\x05values\x04\0\x08repl-var\x03\0\x0a\x03\0\x12repl:api/transport\x05\
\0\x02\x03\0\0\x0freadline-result\x02\x03\0\0\x0dplugin-config\x02\x03\0\0\x08re\
pl-var\x01B\x10\x02\x03\x02\x01\x01\x04\0\x0freadline-result\x03\0\0\x02\x03\x02\
\x01\x02\x04\0\x0dplugin-config\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x08repl-var\x03\
\0\x04\x01p\x03\x01@\0\0\x06\x04\0\x0bget-plugins\x01\x07\x01p\x05\x01@\x01\x04v\
ars\x08\x01\0\x04\0\x0dset-repl-vars\x01\x09\x01@\0\0\x08\x04\0\x0dget-repl-vars\
\x01\x0a\x01@\x01\x03var\x05\x01\0\x04\0\x0cset-repl-var\x01\x0b\x03\0\x13repl:a\
pi/host-state\x05\x04\x02\x03\0\0\x0brepl-result\x01B\x09\x02\x03\x02\x01\x05\x04\
\0\x0brepl-result\x03\0\0\x01@\x02\x0bplugin-names\x07payloads\0\x01\x04\0\x03ru\
n\x01\x02\x01@\x01\x0bplugin-names\0s\x04\0\x03man\x01\x03\x01k~\x01@\x01\x0bplu\
gin-names\0\x04\x04\0\x09arg-count\x01\x05\x03\0\x16repl:api/plugin-runner\x05\x06\
\x01B\x04\x02\x03\x02\x01\x01\x04\0\x0freadline-result\x03\0\0\x01@\x01\x04lines\
\0\x01\x04\0\x08readline\x01\x02\x04\0\x13repl:api/repl-logic\x05\x07\x04\0\x11r\
epl:api/host-api\x04\0\x0b\x0e\x01\0\x08host-api\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
