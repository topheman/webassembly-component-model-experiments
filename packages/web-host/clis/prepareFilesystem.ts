#!/usr/bin/env node --experimental-strip-types --no-warnings
import fs from "node:fs";
import path from "node:path";
import { program } from "commander";

type VirtualFs =
  | Record<
      string,
      | {
          dir: Record<string, VirtualFs>;
        }
      | {
          source: string;
        }
      | Record<string, never>
    >
  | Record<string, any>;

function makeVirtualFs(filepath: string, acc: VirtualFs) {
  fs.readdirSync(filepath).forEach((file) => {
    const fullPath = path.join(filepath, file);
    if (fs.statSync(fullPath).isDirectory()) {
      acc[file] = { dir: {} };
      makeVirtualFs(fullPath, acc[file].dir);
    } else {
      if (file === "README.rust.md") {
        return;
      }
      if (file === "README.browser.md") {
        file = "README.md";
      }
      acc[file] = { source: fs.readFileSync(fullPath, "utf-8") };
    }
  });
}

function prepareFilesystem({ filepath }: { filepath: string }): VirtualFs {
  const workspaceRoot = path.join(import.meta.dirname, "..", "..", "..");
  const targetDir = filepath.startsWith("/")
    ? filepath
    : path.join(workspaceRoot, filepath);
  if (!fs.existsSync(targetDir)) {
    throw new Error(`Path ${filepath} does not exist`);
  }
  const virtualFs: VirtualFs = { dir: {} };
  makeVirtualFs(targetDir, virtualFs.dir);
  return virtualFs;
}

function assertPathIsString(path: string): asserts path is string {
  if (typeof path !== "string") {
    throw new Error("Path must be a string");
  }
}

function template(data: VirtualFs): string {
  return `// THIS FILE IS GENERATED BY THE prepareVirtualFs COMMAND, DO NOT EDIT IT MANUALLY

// It is meant to be used for mounting a virtual filesystem in the browser
// interacting with @bytecodealliance/preview2-shim/filesystem , the shim for wasi:filesystem
//
// The \`fs\` calls like \`read\`, \`readDir\` ... in rust or other languages will be redirected to this virtual filesystem
// and will interact as if the filesystem was a real one.

export function makeVirtualFs() { return ${JSON.stringify(data, null, 2)}; }`;
}

function run() {
  program
    .description("Prepare wasm files for the web host")
    .requiredOption("-p, --path <path>", "Path to the filesystem to prepare")
    .option("-f, --format <format>", "Format to output the filesystem", "json")
    .action((options) => {
      const { path: filepath } = options;
      assertPathIsString(filepath);
      const virtualFs = prepareFilesystem({ filepath });
      if (options.format === "json") {
        console.log(JSON.stringify(virtualFs, null, 2));
      } else if (options.format === "ts") {
        console.log(template(virtualFs));
      }
    });

  program.parse();
}

run();
